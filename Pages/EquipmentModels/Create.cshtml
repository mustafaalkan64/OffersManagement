@page
@model CreateModel
@{
    ViewData["Title"] = "Create Equipment Model";
    var antiforgery = Context.RequestServices.GetRequiredService<Microsoft.AspNetCore.Antiforgery.IAntiforgery>().GetAndStoreTokens(Context);
}

<h1>@ViewData["Title"]</h1>

<div class="row">
    <div class="col-md-6">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group mb-3">
                <label asp-for="EquipmentModel.EquipmentId" class="control-label">Equipment</label>
                <select asp-for="EquipmentModel.EquipmentId" asp-items="Model.EquipmentList" class="form-select">
                    <option value="">Please select equipment</option>
                </select>
                <span asp-validation-for="EquipmentModel.EquipmentId" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label asp-for="EquipmentModel.Brand" class="control-label"></label>
                <input asp-for="EquipmentModel.Brand" class="form-control" />
                <span asp-validation-for="EquipmentModel.Brand" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label asp-for="EquipmentModel.Model" class="control-label"></label>
                <input asp-for="EquipmentModel.Model" class="form-control" />
                <span asp-validation-for="EquipmentModel.Model" class="text-danger"></span>
            </div>

            <div class="form-group">
                <button type="submit" class="btn btn-primary">Create</button>
                <a asp-page="Index" class="btn btn-secondary">Back to List</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        async function loadEquipmentFeatures(equipmentId) {
            if (!equipmentId) return;

            try {
                const response = await fetch(`?handler=EquipmentFeatures&equipmentId=${equipmentId}`, {
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });
                if (response.ok) {
                    const features = await response.json();
                    
                    // Clear existing features
                    const container = document.getElementById('featuresContainer');
                    container.innerHTML = '';
                    
                    // Add features from equipment
                    features.forEach((feature, index) => {
                        const row = document.createElement('div');
                        row.className = 'row mb-2 feature-row';
                        row.innerHTML = `
                            <div class="col-md-4">
                                <input name="Features[${index}].FeatureKey" value="${feature.featureKey}" class="form-control" required />
                            </div>
                            <div class="col-md-6">
                                <textarea name="Features[${index}].FeatureValue" class="form-control" rows="2" required>${feature.featureValue}</textarea>
                            </div>
                            <div class="col-md-2">
                                <button type="button" class="btn btn-danger btn-sm" onclick="removeFeatureRow(this)">Remove</button>
                            </div>
                        `;
                        
                        container.appendChild(row);
                    });
                }
            } catch (error) {
                console.error('Error loading equipment features:', error);
            }
        }
    </script>
} 